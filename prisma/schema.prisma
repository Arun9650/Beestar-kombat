// This is your Prisma schema file for MongoDB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  chatId         String          @unique
  taps           Int             @default(0)
  points         Int             @default(0)
  profit         Int             @default(0)
  lastProfitDate Int?
  rechargeLimit  Int             @default(500)
  pointPerTap    Int             @default(1)
  profitPerHour  Int             @default(0)
  refillRate     Int             @default(1)
  bonus          Int             @default(0)
  active         Boolean         @default(true)
  skin           String          @default("/newImages/BeeMain.png")
  lastLogin      DateTime        @default(now())
  skins          UserSkin[]
  league         String?         @default("Bronze")
  referralCount  Int             @default(0) // Field to count referrals
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  loginStreak    Int             @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCard     UserCard[]
  Bonuster     Bonuster[]
  dailyRewards DailyReward[]
  // Referral system fields
  referredById String?           @db.ObjectId
  referredBy   User?             @relation("UserReferrals", fields: [referredById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals    User[]            @relation("UserReferrals")
  
  achievements UserAchievement[]

  userTasks TasksCompletion[]
  userYouTube YouTubeCompletion[]
}

model AchievementCategory {
  id         String                 @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  milestones AchievementMilestone[]
}

model AchievementMilestone {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  categoryId       String              @db.ObjectId
  name             String
  icon             String
  unlocked         Boolean             @default(false)
  category         AchievementCategory @relation(fields: [categoryId], references: [id])
  userAchievements UserAchievement[]
}

model UserAchievement {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  milestoneId String               @db.ObjectId
  user        User                 @relation(fields: [userId], references: [chatId])
  milestone   AchievementMilestone @relation(fields: [milestoneId], references: [id])
}



model DailyReward {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  day       Int // Day of the reward streak
  coins     Int
  user      User     @relation(fields: [userId], references: [chatId])
  createdAt DateTime @default(now())
}

model Card {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  image             String
  baseCost          Float
  basePPH           Float
  baseLevel         Int        @default(0)
  category          String
  discription       String?
  requiredCardId    String?    @db.ObjectId // ID of the prerequisite card
  requiredCardLevel Int?
  requiredCardTitle String?
  users             UserCard[]
}

model UserCard {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image       String
  baseCost    Float
  basePPH     Float
  baseLevel   Int     @default(0)
  userId      String
  cardId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [chatId])
  card        Card    @relation(fields: [cardId], references: [id])
  category    String
  discription String?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Leagues {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  minEntry    Int
  pointLimit  Int
  trophy      String
  entryReward String
}

model Points {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      String   @unique
  points    Int      @default(0)
  league    String
  autominer Boolean  @default(false)
  tapLimit  Int
  lastTap   DateTime
}

model Bonuster {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  chatId          String @unique
  energy          Int
  energyCost      Int
  energylevel     Int
  multiClickLevel Int    @default(1)
  multiClickCost  Int    @default(500)
  user            User   @relation(fields: [chatId], references: [chatId])
}

model DailyBoosters {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  count Int
  icon  String
}

model TaskCategories {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Tasks {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  category String
  name     String
  points   Int
  link     String
  icon     String
  user     TasksCompletion[]
}

model TasksCompletion {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  taskId String @db.ObjectId
  userId String
  user   User   @relation(fields: [userId], references: [chatId])
  task   Tasks  @relation(fields: [taskId], references: [id])
  points Int
}


model YouTube {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  category String
  name     String
  points   Int
  link     String
  icon     String
  user     YouTubeCompletion[]
}

model YouTubeCompletion {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  taskId String @db.ObjectId
  userId String
  user   User   @relation(fields: [userId], references: [chatId])
  task   YouTube  @relation(fields: [taskId], references: [id])
  points Int
}

model Skins {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String     @default("/newImages/BeeMain.png")
  cost     Int
  featured Boolean    @default(false)
  league   String     @default("Bronze")
  users    UserSkin[]
}

model UserSkin {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  skinId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [chatId])
  skin   Skins  @relation(fields: [skinId], references: [id])
}


model CardPrice {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  price     Float  @default(2)
}